diff --git a/README.md b/README.md
index 64b5086..d3ffa28 100644
--- a/README.md
+++ b/README.md
@@ -668,6 +668,15 @@ dynatrace:
   apiurl: "" # Dynatrace API url, use https://ENVIRONMENTID.live.dynatrace.com/api for Dynatrace SaaS and https://YOURDOMAIN/e/ENVIRONMENTID/api for Dynatrace Managed, more info : https://dt-url.net/ej43qge
   # minimumpriority: "" # minimum priority of event for using this output, order is emergency|alert|critical|error|warning|notice|informational|debug or "" (default)
   # checkcert: true # check if ssl certificate of the output is valid (default: true)
+
+otlp:
+  traces:
+    # endpoint: "" # OTLP endpoint in the form of http://{domain or ip}:4318/
+    # synced: false # Set to true if you want traces to be sent synchronously
+    # minimumpriority: "" # minimum priority of event for using this output, order is emergency|alert|critical|error|warning|notice|informational|debug or "" (default)
+    # checkcert: false # Set if you want to skip TLS certificate validation
+    # duration: 1000 # Artificial span duration in milliseconds
+    # traceidhash: "" # Trace ID Hash "seed" as gotemplate, to select fields from falcopayload output fields (default: automatic to support Kubernetes' or just container.ID)
 ```
 
 Usage :
@@ -1222,8 +1231,9 @@ order is
 - **OTLP_TRACES_ENDPOINT**: OTLP endpoint, if not empty, OpenTelemetry traces output is enabled
 - **OTLP_TRACES_MINIMUMPRIORITY**: minimum priority of event for using this output, order is emergency|alert|critical|error|warning|notice|informational|debug or "" (default)
 - **OTLP_TRACES_SYNCED**: synced OTLP traces, instead of batched (default: `false`)
-- **OTLP_TRACES_INSECURE**: check if ssl certificate of the endpoint is valid (default: `false`)
+- **OTLP_TRACES_CHECKCERT**: check if ssl certificate of the endpoint is valid (default: `false`)
 - **OTLP_TRACES_DURATION**: artificial duration for trace spans in milliseconds (default: `1000`)
+- **OTLP_TRACES_TRACEIDHASH**: trace ID Hash "seed" as gotemplate, to select fields from falcopayload output fields (default: automatic to support Kubernetes' or just container.ID)
 #### Slack/Rocketchat/Mattermost/Googlechat Message Formatting
 
 The `SLACK_MESSAGEFORMAT` environment variable and `slack.messageformat` YAML
diff --git a/config.go b/config.go
index 980c416..2cc1eb1 100644
--- a/config.go
+++ b/config.go
@@ -16,6 +16,7 @@ import (
 	"github.com/spf13/viper"
 	kingpin "gopkg.in/alecthomas/kingpin.v2"
 
+	"github.com/falcosecurity/falcosidekick/outputs"
 	"github.com/falcosecurity/falcosidekick/types"
 )
 
@@ -35,7 +36,7 @@ func getConfig() *types.Configuration {
 		OTLP:            types.OTLPOutputConfig{},
 	}
 
-	otlpSetEnvs()
+	outputs.OtlpSetEnvs()
 	configFile := kingpin.Flag("config-file", "config file").Short('c').ExistingFile()
 	version := kingpin.Flag("version", "falcosidekick version").Short('v').Bool()
 	kingpin.Parse()
@@ -480,7 +481,7 @@ func getConfig() *types.Configuration {
 	v.SetDefault("OTLP.Traces.Endpoint", "")
 	v.SetDefault("OTLP.Traces.Synced", false)
 	v.SetDefault("OTLP.Traces.MinimumPriority", "")
-	v.SetDefault("OTLP.Traces.Insecure", false)
+	v.SetDefault("OTLP.Traces.CheckCert", true)
 	v.SetDefault("OTLP.Traces.TraceIDHash", "")
 	// NB: Unfortunately falco events don't provide endtime, artificially set
 	// it to 1000ms by default, override-able via OTLP_DURATION environment variable.
diff --git a/config_example.yaml b/config_example.yaml
index f79ddea..6779ea5 100644
--- a/config_example.yaml
+++ b/config_example.yaml
@@ -487,6 +487,6 @@ otlp:
     # endpoint: "" # OTLP endpoint in the form of http://{domain or ip}:4318/
     # synced: false # Set to true if you want traces to be sent synchronously
     # minimumpriority: "" # minimum priority of event for using this output, order is emergency|alert|critical|error|warning|notice|informational|debug or "" (default)
-    # insecure: false # Set if you want to skip TLS certificate validation
+    # checkcert: false # Set if you want to skip TLS certificate validation
     # duration: 1000 # Artificial span duration in milliseconds
     # traceidhash: "" # Trace ID Hash "seed" as gotemplate, to select fields from falcopayload output fields (default: automatic to support Kubernetes' or just container.ID)
diff --git a/handlers.go b/handlers.go
index b3ed2b9..4d2fb57 100644
--- a/handlers.go
+++ b/handlers.go
@@ -404,6 +404,6 @@ func forwardEvent(falcopayload types.FalcoPayload) {
 	}
 
 	if config.OTLP.Traces.Endpoint != "" && (falcopayload.Priority >= types.Priority(config.OTLP.Traces.MinimumPriority)) {
-		go otlpClient.OTLPPost(falcopayload)
+		go otlpClient.OTLPTracesPost(falcopayload)
 	}
 }
diff --git a/main.go b/main.go
index 97106e5..08a42d3 100644
--- a/main.go
+++ b/main.go
@@ -81,6 +81,7 @@ var (
 	promStats                     *types.PromStatistics
 
 	regPromLabels *regexp.Regexp
+	shutDownFuncs []func()
 )
 
 func init() {
@@ -733,13 +734,12 @@ func init() {
 
 	if config.OTLP.Traces.Endpoint != "" {
 		var err error
-		otlpClient, err = outputs.NewClient("OTLP", config.OTLP.Traces.Endpoint, false, false, config, stats, promStats, statsdClient, dogstatsdClient)
+		otlpClient, err = outputs.NewOtlpTracesClient(config, stats, promStats, statsdClient, dogstatsdClient)
 		if err != nil {
 			config.OTLP.Traces.Endpoint = ""
 		} else {
 			outputs.EnabledOutputs = append(outputs.EnabledOutputs, "OTLP.Traces")
-			log.Printf("[INFO] : OTLP.Traces=%+v\n", config.OTLP.Traces)
-			otlpShutdown = otlpInit()
+			shutDownFuncs = append(shutDownFuncs, otlpClient.ShutDownFunc)
 		}
 	}
 
@@ -748,11 +748,9 @@ func init() {
 
 }
 
-var otlpShutdown func()
-
 func main() {
-	if otlpShutdown != nil {
-		defer otlpShutdown()
+	for _, shutdown := range shutDownFuncs {
+		defer shutdown()
 	}
 	if config.Debug {
 		log.Printf("[INFO]  : Debug mode : %v", config.Debug)
diff --git a/outputs/client.go b/outputs/client.go
index bb46734..9d6d98f 100644
--- a/outputs/client.go
+++ b/outputs/client.go
@@ -102,6 +102,7 @@ type Client struct {
 	CheckCert               bool
 	HeaderList              []Header
 	ContentType             string
+	ShutDownFunc            func()
 	Config                  *types.Configuration
 	Stats                   *types.Statistics
 	PromStats               *types.PromStatistics
diff --git a/outputs/otlp.go b/outputs/otlp.go
index 1eddd1c..bd56c16 100644
--- a/outputs/otlp.go
+++ b/outputs/otlp.go
@@ -25,7 +25,7 @@ var getTracerProvider = otel.GetTracerProvider
 func (c *Client) newTrace(falcopayload types.FalcoPayload) *trace.Span {
 	traceID, _, err := generateTraceID(falcopayload, c.Config)
 	if err != nil {
-		log.Printf("[ERROR] : Error generating trace id: %v for output fields %v", err, falcopayload.OutputFields)
+		log.Printf("[ERROR] : OTLP Traces : Error generating trace id: %v for output fields %v", err, falcopayload.OutputFields)
 		return nil
 	}
 
@@ -56,7 +56,7 @@ func (c *Client) newTrace(falcopayload types.FalcoPayload) *trace.Span {
 	span.End(trace.WithTimestamp(endTime))
 
 	if c.Config.Debug {
-		log.Printf("[DEBUG] : OTLP payload generated successfully for traceid=%s", span.SpanContext().TraceID())
+		log.Printf("[DEBUG] : OTLP Traces : payload generated successfully for traceid=%s", span.SpanContext().TraceID())
 	}
 
 	return &span
@@ -65,7 +65,7 @@ func (c *Client) newTrace(falcopayload types.FalcoPayload) *trace.Span {
 // OTLPPost generates an OTLP trace _implicitly_ via newTrace() by
 // calling OTEL SDK's tracer.Start() --> span.End(), i.e. no need to explicitly
 // do a HTTP POST
-func (c *Client) OTLPPost(falcopayload types.FalcoPayload) {
+func (c *Client) OTLPTracesPost(falcopayload types.FalcoPayload) {
 	c.Stats.OTLP.Add(Total, 1)
 
 	trace := c.newTrace(falcopayload)
@@ -73,7 +73,7 @@ func (c *Client) OTLPPost(falcopayload types.FalcoPayload) {
 		go c.CountMetric(Outputs, 1, []string{"output:otlp/traces", "status:error"})
 		c.Stats.OTLP.Add(Error, 1)
 		c.PromStats.Outputs.With(map[string]string{"destination": "otlp/traces", "status": Error}).Inc()
-		log.Printf("[ERROR] : OTLPError generating trace")
+		log.Printf("[ERROR] : OTLP Traces : Error generating trace")
 		return
 	}
 	// Setting the success status
@@ -96,7 +96,7 @@ var (
 func sanitizeOutputFields(falcopayload types.FalcoPayload) map[string]interface{} {
 	ret := make(map[string]interface{})
 	for k, v := range falcopayload.OutputFields {
-		k := strings.Replace(k, ".", "_", -1)
+		k := strings.ReplaceAll(k, ".", "_")
 		ret[k] = v
 	}
 	return ret
diff --git a/otlp_init.go b/outputs/otlp_init.go
similarity index 70%
rename from otlp_init.go
rename to outputs/otlp_init.go
index 33a25f0..aa21b39 100644
--- a/otlp_init.go
+++ b/outputs/otlp_init.go
@@ -1,4 +1,4 @@
-package main
+package outputs
 
 import (
 	"context"
@@ -6,10 +6,12 @@ import (
 	"log"
 	"os"
 
+	"github.com/DataDog/datadog-go/statsd"
+	"github.com/falcosecurity/falcosidekick/types"
 	"go.opentelemetry.io/otel"
 	"go.opentelemetry.io/otel/exporters/otlp/otlptrace"
 	"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp"
-	"go.opentelemetry.io/otel/sdk/resource"
+	otelresource "go.opentelemetry.io/otel/sdk/resource"
 	sdktrace "go.opentelemetry.io/otel/sdk/trace"
 	semconv "go.opentelemetry.io/otel/semconv/v1.20.0"
 )
@@ -19,21 +21,21 @@ const (
 	OTLPinstrumentationVersion = "v0.1.0"
 )
 
-func newResource() *resource.Resource {
-	return resource.NewWithAttributes(
+func newResource() *otelresource.Resource {
+	return otelresource.NewWithAttributes(
 		semconv.SchemaURL,
 		semconv.ServiceName(OTLPinstrumentationName),
 		semconv.ServiceVersion(OTLPinstrumentationVersion),
 	)
 }
 
-func installExportPipeline(ctx context.Context) (func(context.Context) error, error) {
+func installExportPipeline(config *types.Configuration, ctx context.Context) (func(context.Context) error, error) {
 	var client otlptrace.Client
-	switch config.OTLP.Traces.Insecure {
+	switch config.OTLP.Traces.CheckCert {
 	case true:
-		client = otlptracehttp.NewClient(otlptracehttp.WithInsecure())
-	case false:
 		client = otlptracehttp.NewClient()
+	case false:
+		client = otlptracehttp.NewClient(otlptracehttp.WithInsecure())
 	}
 
 	exporter, err := otlptrace.New(ctx, client)
@@ -54,19 +56,34 @@ func installExportPipeline(ctx context.Context) (func(context.Context) error, er
 	return tracerProvider.Shutdown, nil
 }
 
-func otlpInit() func() {
+func otlpInit(config *types.Configuration) (func(), error) {
 	ctx := context.Background()
 	// Registers a tracer Provider globally.
-	shutdown, err := installExportPipeline(ctx)
+	shutdown, err := installExportPipeline(config, ctx)
 	if err != nil {
-		log.Fatal(err)
+		log.Println(err)
+		return nil, err
 	}
 	shutDownCallback := func() {
 		if err := shutdown(ctx); err != nil {
-			log.Fatal(err)
+			log.Println(err)
 		}
 	}
-	return shutDownCallback
+	return shutDownCallback, nil
+}
+
+func NewOtlpTracesClient(config *types.Configuration, stats *types.Statistics, promStats *types.PromStatistics, statsdClient, dogstatsdClient *statsd.Client) (*Client, error) {
+	otlpClient, err := NewClient("OTLP.Traces", config.OTLP.Traces.Endpoint, false, false, config, stats, promStats, statsdClient, dogstatsdClient)
+	if err != nil {
+		return nil, err
+	}
+	shutDownFunc, err := otlpInit(config)
+	if err != nil {
+		return nil, err
+	}
+	log.Printf("[INFO] : OTLP.Traces=%+v\n", config.OTLP.Traces)
+	otlpClient.ShutDownFunc = shutDownFunc
+	return otlpClient, nil
 }
 
 type otlpEnv struct {
@@ -114,7 +131,7 @@ func otlpSetEnv(envs []otlpEnv) string {
 // - OTEL_EXPORTER_OTLP_HEADERS, OTEL_EXPORTER_OTLP_TRACES_HEADERS
 // - OTEL_EXPORTER_OTLP_TIMEOUT, OTEL_EXPORTER_OTLP_TRACES_TIMEOUT
 // - OTEL_EXPORTER_OTLP_PROTOCOL, OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
-func otlpSetEnvs() {
+func OtlpSetEnvs() {
 	otlpSetEnv([]otlpEnv{
 		// Set OTLP_TRACES_ENDPOINT (used by config.OTLP.Traces) from SDK OTLP env vars
 		{Target: "OTLP_TRACES_ENDPOINT", EnvName: "OTEL_EXPORTER_OTLP_TRACES_ENDPOINT", Path: ""},
diff --git a/otlp_init_test.go b/outputs/otlp_init_test.go
similarity index 98%
rename from otlp_init_test.go
rename to outputs/otlp_init_test.go
index 7881fce..25f86ea 100644
--- a/otlp_init_test.go
+++ b/outputs/otlp_init_test.go
@@ -1,4 +1,4 @@
-package main
+package outputs
 
 import (
 	"testing"
@@ -68,7 +68,7 @@ func TestOtlpInit(t *testing.T) {
 	for _, c := range cases {
 		otlpOS = newMockOS()
 		otlpOS.Setenv(c.key, c.value)
-		otlpSetEnvs()
+		OtlpSetEnvs()
 		require.Equal(t, c.wantedValue, otlpOS.Getenv(c.wantedKey), c.msg)
 	}
 }
diff --git a/types/types.go b/types/types.go
index 6de47b9..a196ece 100644
--- a/types/types.go
+++ b/types/types.go
@@ -809,7 +809,7 @@ type PromStatistics struct {
 type OTLPTraces struct {
 	Endpoint            string
 	Duration            int64
-	Insecure            bool
+	CheckCert           bool
 	Synced              bool
 	MinimumPriority     string
 	TraceIDHash         string
