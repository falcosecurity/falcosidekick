version: 2.1
executors:
  default:
    docker:
    - image: cimg/go:1.17.4

install_buildx: &install_buildx
  name: Install Docker buildx
  command: |
    mkdir -p ~/.docker/cli-plugins
    curl -sSL -o ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.7.0/buildx-v0.7.0.linux-amd64
    chmod a+x ~/.docker/cli-plugins/docker-buildx

setup_docker_multiarch: &setup_docker_multiarch
  name: Create Docker context
  command: |
    docker context create falco-environment
    docker buildx install
    docker run --rm --privileged tonistiigi/binfmt:latest --install "$BUILDX_PLATFORMS"
    docker buildx create --name docker-multiarch falco-environment \
      --platform linux/amd64,linux/arm/v7,linux/arm64
    docker buildx inspect --builder docker-multiarch --bootstrap
    docker buildx use docker-multiarch

install_goreleaser: &install_goreleaser
  name: Install goreleaser
  command: |
    GORELEASER_URL="https://github.com/goreleaser/goreleaser/releases/download/v1.2.5/goreleaser_Linux_x86_64.tar.gz"

    curl --output goreleaser_Linux_x86_64.tar.gz \
      --silent --show-error --location --fail --retry 3 \
      "$GORELEASER_URL"

    sudo mkdir -p /tmp/goreleaser
    sudo tar -C /tmp/goreleaser -xzf goreleaser_Linux_x86_64.tar.gz
    sudo mv /tmp/goreleaser/goreleaser /usr/local/bin/
    goreleaser --version

install_awscli: &install_awscli
  name: Install pre-requisites
  command: |
    DIR=$(mktemp -d) && pushd $DIR
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    ./aws/install -i $HOME/.local/aws-cli -b $HOME/.local/bin
    popd && rm -r $DIR

install_cosign: &install_cosign
  name: Install cosign
  command: |
    COSIGN_URL="https://github.com/sigstore/cosign/releases/download/v1.4.1/cosign-linux-amd64"

    curl --output cosign \
      --silent --show-error --location --fail --retry 3 \
      "$COSIGN_URL"

    sudo chmod +x cosign
    sudo mv cosign /usr/local/bin/
    cosign version

install_syft: &install_syft
  name: Install syft
  command: |
    SYFT_URL="https://github.com/anchore/syft/releases/download/v0.34.0/syft_0.34.0_linux_amd64.tar.gz"

    curl --output syft_0.34.0_linux_amd64.tar.gz \
      --silent --show-error --location --fail --retry 3 \
      "$SYFT_URL"

    sudo tar -C /tmp -xzf syft_0.34.0_linux_amd64.tar.gz
    sudo mv /tmp/syft /usr/local/bin/
    syft version

jobs:
  lint:
    executor:
      name: default
    steps:
    - checkout
    - run: make lint

  test:
    executor:
      name: default
    steps:
    - checkout
    - run: make test

  build-image:
    executor:
      name: default
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
    - checkout
    - setup_remote_docker
    - run: *install_buildx
    - run: *setup_docker_multiarch
    - run: *install_cosign
    - run: *install_syft
    - run: *install_goreleaser
    - run:
        no_output_timeout: 30m
        command: |
          make goreleaser-snapshot
          docker images
          docker run falcosecurity/falcosidekick:latest-amd64 --version

  build-push-main:
    executor:
      name: default
    steps:
    - checkout
    - setup_remote_docker
    - run: *install_buildx
    - run: *setup_docker_multiarch
    - run: *install_goreleaser
    - run: *install_cosign
    - run: *install_syft
    - run:
        no_output_timeout: 30m
        command: |
          make goreleaser-snapshot
          docker run falcosecurity/falcosidekick:latest-amd64 --version
    - run:
        name: Push image to Dockerhub
        no_output_timeout: 30m
        command: |
          echo ${DOCKERHUB_SECRET} | docker login -u ${DOCKERHUB_USER} --password-stdin
          docker push falcosecurity/falcosidekick:latest-amd64
          docker push falcosecurity/falcosidekick:latest-arm64
          docker push falcosecurity/falcosidekick:latest-armv7
          docker manifest create --amend falcosecurity/falcosidekick:latest falcosecurity/falcosidekick:latest-amd64 \
            falcosecurity/falcosidekick:latest-arm64 falcosecurity/falcosidekick:latest-armv7
          docker manifest push --purge falcosecurity/falcosidekick:latest

  build-push-ecr:
    executor:
      name: default
    steps:
    - checkout
    - setup_remote_docker
    - run: *install_buildx
    - run: *setup_docker_multiarch
    - run: *install_goreleaser
    - run: *install_awscli
    - run: *install_cosign
    - run: *install_syft
    - run:
        no_output_timeout: 30m
        command: |
          make goreleaser-snapshot
          docker run public.ecr.aws/falcosecurity/falcosidekick:latest-amd64 --version
    - run:
        name: Push image to AWS ECR
        no_output_timeout: 30m
        command: |
          aws ecr-public get-login-password --region us-east-1 | \
            docker login --username AWS --password-stdin public.ecr.aws/falcosecurity
          docker push public.ecr.aws/falcosecurity/falcosidekick:latest-amd64
          docker push public.ecr.aws/falcosecurity/falcosidekick:latest-arm64
          docker push public.ecr.aws/falcosecurity/falcosidekick:latest-armv7
          docker manifest create --amend public.ecr.aws/falcosecurity/falcosidekick:latest public.ecr.aws/falcosecurity/falcosidekick:latest-amd64 \
            public.ecr.aws/falcosecurity/falcosidekick:latest-arm64 public.ecr.aws/falcosecurity/falcosidekick:latest-armv7
          docker manifest push --purge public.ecr.aws/falcosecurity/falcosidekick:latest

  release:
    executor:
      name: default
    environment:
      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
    - checkout
    - setup_remote_docker
    - run: *install_buildx
    - run: *setup_docker_multiarch
    - run: *install_goreleaser
    - run: *install_cosign
    - run: *install_syft
    - run: *install_awscli
    - run:
        name: Login Registries
        command: |
          echo ${DOCKERHUB_SECRET} | docker login -u ${DOCKERHUB_USER} --password-stdin
          aws ecr-public get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin public.ecr.aws/falcosecurity
    - run:
        name: Release
        no_output_timeout: 30m
        command: make goreleaser

workflows:
  main:
    jobs:
      - test:
          filters:
            tags:
              only: /(v)?[0-9]+(\.[0-9]+)*(-.*)*/
      - lint:
          filters:
            tags:
              only: /(v)?[0-9]+(\.[0-9]+)*(-.*)*/
      - build-image:
          requires:
            - test
            - lint
          filters:
            branches:
              ignore: master
            tags:
              only: /(v)?[0-9]+(\.[0-9]+)*(-.*)*/
      - build-push-main:
          context: falco
          requires:
            - test
            - lint
          filters:
            branches:
              only: master
      - build-push-ecr:
          context: test-infra
          requires:
            - test
            - lint
          filters:
            branches:
              only: master
      - release:
          context:
            - falco
            - test-infra
          requires:
            - test
            - lint
            - build-image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /(v)?[0-9]+(\.[0-9]+)*(-.*)*/
